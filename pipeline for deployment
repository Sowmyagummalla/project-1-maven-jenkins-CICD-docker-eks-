pipeline {
    agent any
    tools {
        maven 'maven3'
        jdk 'java'
        nodejs 'node22'
    }
    environment{
        DOCKER_IMAGE = 'sowmyagummalla/project1:1.0'
    }
    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Sowmyagummalla/project-1-maven-jenkins-CICD-docker-eks-.git'
            }
        }
        stage('build') { 
            steps { 
                sh 'mvn clean package'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''mvn clean verify sonar:sonar \
                    -Dsonar.projectName=project1 \
                    -Dsonar.projectKey=project1'''
                }
            }
        }
        stage("quality gate") {
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script{
                   withDockerRegistry(credentialsId: 'dockerhub'){
                      sh 'docker build -t $DOCKER_IMAGE .'
                      sh 'docker push $DOCKER_IMAGE'
                    }
                   
                }
               
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image sowmyagummalla/project1:1.0 > trivyimage.txt' 
            }
        }
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Sowmyagummalla/project-1-maven-jenkins-CICD-docker-eks-.git'
            }
        }
        stage('Update Deployment file') {
            steps {
                dir('Kubernetes-Manifests-file') {
                    withCredentials([string(credentialsId: 'github-token', variable: 'git_token')]) {
                        sh '''
                            git config user.email "sowmyareddygummalla@gmail.com"
                            git config user.name "Sowmyagummalla"
                            BUILD_NUMBER=latest
                            echo $BUILD_NUMBER
                            sed -i "s#image:.*#image: sowmyagummalla/project1:${BUILD_NUMBER}#g" deploy_svc.yml
                            git add .
                            git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                            git push https://${git_token}@github.com/Sowmyagummalla/project-1-maven-jenkins-CICD-docker-eks- HEAD:main
                        '''
                    }
                }
            }
        }
        stage('Deploy to kubernetes') {
            steps {
                script {
                    dir('Kubernetes-Manifests-file') {
                        withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8s', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                            sh 'aws eks update-kubeconfig --name project-eks --region ap-south-1'
                            sh 'kubectl apply -f deploy_svc.yml'
                        }
                    }
                }
            }
        }
    }
}
